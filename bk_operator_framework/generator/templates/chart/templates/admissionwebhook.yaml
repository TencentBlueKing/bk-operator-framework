{{- $serviceName := printf "%s-webhook-service" (include "<< project_name >>.fullname" .) -}}
{{- $altNames := list
    $serviceName
    (printf "%s.%s" $serviceName .Release.Namespace)
    (printf "%s.%s.svc" $serviceName .Release.Namespace)
    (printf "%s.%s.svc.cluster.local" $serviceName .Release.Namespace)
  -}}
{{- $ca := genCA (printf "%s-ca" (include "<< project_name >>.fullname" .)) 3650 -}}
{{- $cert := genSignedCert .Release.Name nil $altNames 3650 $ca -}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "<< project_name >>.fullname" . }}-webhook-server-cert
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  {{- if .Values.webhook.certAutoGenerate }}
  tls.crt: {{ $cert.Cert | b64enc | quote }}
  tls.key: {{ $cert.Key | b64enc | quote }}
  {{- else }}
  tls.crt: {{ .Values.webhook.tlsCert }}
  tls.key: {{ .Values.webhook.tlsKey }}
  {{- end }}
<%- if mutating_webhooks %>
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: {{ include "<< project_name >>.fullname" . }}-mutating-webhook-configuration
webhooks:
<%- for webhook in mutating_webhooks %>
- name: << webhook.name >>
  matchPolicy: << webhook.matchPolicy >>
  sideEffects: << webhook.sideEffects >>
  failurePolicy: << webhook.failurePolicy >>
  timeoutSeconds: << webhook.timeoutSeconds >>
  admissionReviewVersions: << webhook.admissionReviewVersions | toJson >>
  <%- if webhook.objectSelector %>
  objectSelector: << webhook.objectSelector | toJson >>
  <%- endif %>
  clientConfig:
    {{- if .Values.webhook.certAutoGenerate }}
    caBundle: {{ $ca.Cert | b64enc | quote }}
    {{- else }}
    caBundle: {{ .Values.webhook.caCert }}
    {{- end }}
    service:
      name: {{ include "<< project_name >>.fullname" . }}-webhook-service
      namespace: {{ .Release.Namespace }}
      port: 443
      path: /<< webhook.name.split('.')[0] >>
  rules:
<%- for rule in webhook.rules %>
  - operations: << rule.operations | tojson >>
    apiGroups: << rule.apiGroups | tojson >>
    apiVersions: << rule.apiVersions | tojson >>
    resources: << rule.resources | tojson >>
    scope: << rule.scope >>
<%- endfor %>
<%- endfor %>
<%- endif %>
<%- if validating_webhooks %>
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: {{ include "<< project_name >>.fullname" . }}-validating-webhook-configuration
webhooks:
<%- for webhook in validating_webhooks %>
- name: << webhook.name >>
  matchPolicy: << webhook.matchPolicy >>
  sideEffects: << webhook.sideEffects >>
  failurePolicy: << webhook.failurePolicy >>
  timeoutSeconds: << webhook.timeoutSeconds >>
  admissionReviewVersions: << webhook.admissionReviewVersions | toJson >>
  <%- if webhook.objectSelector %>
  objectSelector: << webhook.objectSelector | toJson >>
  <%- endif %>
  clientConfig:
    {{- if .Values.webhook.certAutoGenerate }}
    caBundle: {{ $ca.Cert | b64enc | quote }}
    {{- else }}
    caBundle: {{ .Values.webhook.caCert }}
    {{- end }}
    service:
      name: {{ include "<< project_name >>.fullname" . }}-webhook-service
      namespace: {{ .Release.Namespace }}
      port: 443
      path: /<< webhook.name.split('.')[0] >>
  rules:
<%- for rule in webhook.rules %>
  - operations: << rule.operations | toJson >>
    apiGroups: << rule.apiGroups | toJson >>
    apiVersions: << rule.apiVersions | toJson >>
    resources: << rule.resources | toJson >>
    scope: << rule.scope >>
<%- endfor %>
<%- endfor %>
<%- endif %>